name: CI

on: [push, pull_request]

env:
  M_BUILD_DIR: _build_meson
  C_BUILD_DIR: _build_cmake
  PIP_PACKAGES: >-
    meson==0.55.3
    ninja
    cmake
    gcovr
  PIP_EXTRAS: >-
    pkgconfig
    pytest
    pytest-cov
    cffi
    numpy
    qcelemental

jobs:
  gcc-build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        gcc_v: [9]

    env:
      FC: gfortran
      CC: gcc
      GCC_V: ${{ matrix.gcc_v }}
      OMP_NUM_THREADS: 2,1
      PYTHON_V: 3.8

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - uses: actions/setup-python@v1
      with:
        python-version: ${{ env.PYTHON_V }}

    - name: Install GCC (OSX)
      if: contains(matrix.os, 'macos')
      run: |
        ln -s /usr/local/bin/gfortran-${{ env.GCC_V }} /usr/local/bin/gfortran
        ln -s /usr/local/bin/gcc-${{ env.GCC_V }} /usr/local/bin/gcc
        ln -s /usr/local/bin/g++-${{ env.GCC_V }} /usr/local/bin/g++

    - name: Install GCC (Linux)
      if: contains(matrix.os, 'ubuntu')
      run: >-
        sudo update-alternatives
        --install /usr/bin/gcc gcc /usr/bin/gcc-${{ env.GCC_V }} 100
        --slave /usr/bin/gfortran gfortran /usr/bin/gfortran-${{ env.GCC_V }}
        --slave /usr/bin/gcov gcov /usr/bin/gcov-${{ env.GCC_V }}

    - name: Install meson and test dependencies
      run: pip3 install ${{ env.PIP_PACKAGES }} ${{ env.PIP_EXTRAS }}

    - name: Configure build
      run: >-
        meson setup ${{ env.M_BUILD_DIR }}
        --buildtype=debug
        --prefix=$PWD/_dist
        --libdir=lib
        --warnlevel=0
        -Db_coverage=true
        -Dlapack=netlib
        -Dpython=true

    - name: Build library
      run: meson compile -C ${{ env.M_BUILD_DIR }}

    - name: Run unit tests
      run: |
         meson test -C ${{ env.M_BUILD_DIR }} --print-errorlogs --no-rebuild --num-processes 2 -t 2
         ninja -C ${{ env.M_BUILD_DIR }} coverage

    - name: Configure CMake build
      run: >-
        cmake
        -B ${{ env.C_BUILD_DIR }}
        -G Ninja
        -DCMAKE_INSTALL_PREFIX=$PWD/_cdist

    - name: Build project (CMake)
      run: cmake --build ${{ env.C_BUILD_DIR }}

    - name: Run unit tests (CTest)
      run: ctest
      working-directory: ${{ env.C_BUILD_DIR }}

    - name: Install project (CMake)
      run: cmake --install ${{ env.C_BUILD_DIR }}

    - name: Install project
      run: |
        meson install -C ${{ env.M_BUILD_DIR }} --no-rebuild
        echo "DFTD3_PREFIX=$PWD/_dist" >> $GITHUB_ENV

    - name: Create package
      run: |
        tar cvf ${{ env.OUTPUT }} _dist
        xz -T0 ${{ env.OUTPUT }}
        echo "DFTD3_OUTPUT=${{ env.OUTPUT }}.xz" >> $GITHUB_ENV
      env:
        OUTPUT: dftd3-gcc-${{ matrix.gcc_v }}-${{ matrix.os }}.tar

    - name: Upload package
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.DFTD3_OUTPUT }}
        path: ${{ env.DFTD3_OUTPUT }}

    - name: Test Python API
      run: pytest --pyargs dftd3 --cov=dftd3 -vv
      env:
        LD_LIBRARY_PATH: ${{ env.LD_LIBRARY_PATH }}:${{ env.DFTD3_PREFIX }}/lib
        PYTHONPATH: ${{ env.PYTHONPATH }}:${{ env.DFTD3_PREFIX }}/lib/python${{ env.PYTHON_V }}/site-packages

    - name: Upload coverage report
      uses: codecov/codecov-action@v1

    - name: Configure out-of-tree build
      run: >-
        meson setup ${{ env.M_BUILD_DIR }}
        --prefix=$PWD/_dist
        --libdir=lib
        --warnlevel=0
      working-directory: python
      env:
        PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH }}:${{ env.DFTD3_PREFIX }}/lib/pkgconfig

    - name: Build Python extension module
      run: meson compile -C ${{ env.M_BUILD_DIR }}
      working-directory: python

    - name: Install Python extension module (meson)
      run: meson install -C ${{ env.M_BUILD_DIR }} --no-rebuild
      working-directory: python

  python-build:
    needs:
      - gcc-build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        gcc_v: [9]
        python_v: ['3.6', '3.7', '3.8']

    env:
      FC: gfortran
      CC: gcc
      GCC_V: ${{ matrix.gcc_v }}
      PYTHON_V: ${{ matrix.python_v }}
      OMP_NUM_THREADS: 2,1
      DFTD3_OUTPUT: dftd3-gcc-${{ matrix.gcc_v }}-${{ matrix.os }}.tar.xz

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python_v }}

    - name: Install GCC (OSX)
      if: contains(matrix.os, 'macos')
      run: |
        ln -s /usr/local/bin/gfortran-${{ env.GCC_V }} /usr/local/bin/gfortran
        ln -s /usr/local/bin/gcc-${{ env.GCC_V }} /usr/local/bin/gcc
        ln -s /usr/local/bin/g++-${{ env.GCC_V }} /usr/local/bin/g++

    - name: Install GCC (Linux)
      if: contains(matrix.os, 'ubuntu')
      run: >-
        sudo update-alternatives
        --install /usr/bin/gcc gcc /usr/bin/gcc-${{ env.GCC_V }} 100
        --slave /usr/bin/gfortran gfortran /usr/bin/gfortran-${{ env.GCC_V }}
        --slave /usr/bin/gcov gcov /usr/bin/gcov-${{ env.GCC_V }}

    - name: Install meson and test dependencies
      run: pip3 install ${{ env.PIP_EXTRAS }}

    - name: Download package
      uses: actions/download-artifact@v4.1.7
      with:
        name: ${{ env.DFTD3_OUTPUT }}

    - name: Unpack package
      run: |
        tar xvf ${{ env.DFTD3_OUTPUT }}
        echo "DFTD3_PREFIX=$PWD/_dist" >> $GITHUB_ENV

    - name: Install Python extension module (pip)
      run: pip3 install . --user
      working-directory: python
      env:
        PKG_CONFIG_PATH: ${{ env.PKG_CONFIG_PATH }}:${{ env.DFTD3_PREFIX }}/lib/pkgconfig

    - name: Test Python API
      run: pytest --pyargs dftd3 --cov=dftd3 -vv
      env:
        LD_LIBRARY_PATH: ${{ env.LD_LIBRARY_PATH }}:${{ env.DFTD3_PREFIX }}/lib

    - name: Upload coverage report
      uses: codecov/codecov-action@v1

  # Test native MinGW Windows build
  mingw-build:
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include: [
          { msystem: MINGW64, arch: x86_64 },
        # { msystem: MINGW32, arch: i686   }
        ]
    defaults:
      run:
        shell: msys2 {0}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup MSYS2 toolchain
      uses: msys2/setup-msys2@v2
      with:
        msystem: ${{ matrix.msystem }}
        update: false
        install: >-
          git
          mingw-w64-${{ matrix.arch }}-gcc-fortran
          mingw-w64-${{ matrix.arch }}-python
          mingw-w64-${{ matrix.arch }}-python-pip
          mingw-w64-${{ matrix.arch }}-cmake
          mingw-w64-${{ matrix.arch }}-ninja

    - name: Install meson
      run: pip3 install meson==0.55.3

    - name: Configure build
      run: meson setup ${{ env.M_BUILD_DIR }} --warnlevel=0
      env:
        FC: gfortran
        CC: gcc

    - name: Build project
      run: meson compile -C ${{ env.M_BUILD_DIR }}

    - name: Run unit tests
      run: meson test -C ${{ env.M_BUILD_DIR }} --print-errorlogs --no-rebuild
      env:
        OMP_NUM_THREADS: 2,1

    # FIXME: CMake build broken due to issue introduced in version CMake version 3.20.3
    #- name: Configure cmake build
    #  run: cmake -B ${{ env.C_BUILD_DIR }} -G Ninja -DWITH_BLAS=FALSE

    #- name: Build project (CMake)
    #  run: cmake --build ${{ env.C_BUILD_DIR }}

    #- name: Run unit tests (CTest)
    #  run: ctest
    #  working-directory: ${{ env.C_BUILD_DIR }}
    #  env:
    #    OMP_NUM_THREADS: 2,1

  intel-build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04]
        fc: [ifort]

    env:
      FC: ${{ matrix.fc }}
      OMP_NUM_THREADS: 2,1

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - uses: actions/setup-python@v1
      with:
        python-version: '3.x'

    - name: Add Intel repository
      run: |
        wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        rm GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
        sudo apt-get update

    - name: Install Intel oneAPI compiler
      run: |
        sudo apt-get install intel-oneapi-compiler-fortran
        source /opt/intel/oneapi/setvars.sh
        printenv >> $GITHUB_ENV

    - name: Install meson/cmake
      run: pip3 install meson ninja

    - name: Configure meson build
      run: meson setup ${{ env.M_BUILD_DIR }}

    - name: Build library
      run: meson compile -C ${{ env.M_BUILD_DIR }}

    - name: Run unit tests
      run: meson test -C ${{ env.M_BUILD_DIR }} --print-errorlogs --no-rebuild

    - name: Configure cmake build
      run: cmake -B ${{ env.C_BUILD_DIR }} -G Ninja

    - name: Build library (CMake)
      run: cmake --build ${{ env.C_BUILD_DIR }}

    - name: Run unit tests (CTest)
      run: ctest
      working-directory: ${{ env.C_BUILD_DIR }}
